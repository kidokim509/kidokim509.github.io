<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://kidokim509.github.io</id><title>olaf.kido</title><subtitle>a blog about software engineering, machine learning and my life.</subtitle> <updated>2021-01-22T00:10:19+09:00</updated> <author> <name>Kido Kim</name> <uri>https://kidokim509.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kidokim509.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Kido Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>회의를 잘 하기 위한 준비물</title><link href="https://kidokim509.github.io/posts/how-to-make-meeting-efficient/" rel="alternate" type="text/html" title="회의를 잘 하기 위한 준비물" /><published>2021-01-14T00:54:00+09:00</published> <updated>2021-01-22T00:09:48+09:00</updated> <id>https://kidokim509.github.io/posts/how-to-make-meeting-efficient/</id> <content src="https://kidokim509.github.io/posts/how-to-make-meeting-efficient/" /> <author> <name>Kido Kim</name> </author> <category term="dev" /> <category term="project mgmt" /> <summary> 작년에 제안해서 준비해오던 프로젝트가 드디어 조금씩 진행되고 있다. 프로젝트의 방향성을 정하고 만들 data product의 세부적인 방향, 기준에 대해 정의하기 위해 10여명이 모여 4시간에 이르는 회의를 했다. 주어진 4시간 안에 원하는 결과를 도출하기 위해서는 회의를 효율적으로 의도대로 진행하는 것이 중요해보였다. “그냥 다 같이 이야기나 한 번 해보시죠”하고 준비없이 회의에 들어갔다가는 10명의 4시간. 그러니까 40시간을 통채로 날려먹을 수도 있기 때문이다. 그러자면 일단 회의에 들어오기 전에 참석자들이 이 회의가 무슨 회의이고 어떤 것들을 논의할 것이고 논의를 위해서 미리 알아두어야 할 것들에 대해 정리할 필요가 있었다. 그래서 6 page를 적는다는 마음으로 아래 내용들을 정리해서 사전 ... </summary> </entry> <entry><title>100일 동안 매일 TIL commit 하기 회고</title><link href="https://kidokim509.github.io/retrospective/100TIL/" rel="alternate" type="text/html" title="100일 동안 매일 TIL commit 하기 회고" /><published>2019-01-22T18:50:00+09:00</published> <updated>2021-01-19T15:09:55+09:00</updated> <id>https://kidokim509.github.io/retrospective/100TIL/</id> <content src="https://kidokim509.github.io/retrospective/100TIL/" /> <author> <name>Kido Kim</name> </author> <category term="dev" /> <category term="retrospective" /> <summary> 100일 동안 매일 TIL commit 하기 (시즌2)가 오늘로 끝난다. 시즌 1의 저조했던 출석률에 비하면 이번에는 50% 넘게 성공했으니, 2일에 한 번 꼴로는 무언가 그낭 공부한 것을 요약하여 git에 올린 셈이다. 이번 시즌에는 주로 “하이 퍼포먼스 스파크” 스터디 한 내용과 “Tour Of Scala” 예제 따라해본 것을 위주로 올렸다. 초반 12일 동안은 매일 매일 꾸준히 했고, 이후 주말에 빠지기 시작하면서 결석일이 생겨났다. 41일차부터 4-5일 연속으로 빠지는 일이 생기면서 출석률이 많이 떨어지기 시작했다. 아무래도 나는 30-40일 주기로 뭔가 작정하는게 잘 맞는 듯 하다. 꼭 공부하는 것이 아니더라도 매일매일 꾸준히 생각한, 배운것을 정리해두는 습관을 꽤 중요한 것 같다. 스스로... </summary> </entry> <entry><title>principles for the unit test of data processing job</title><link href="https://kidokim509.github.io/posts/spark-job-unit-test/" rel="alternate" type="text/html" title="principles for the unit test of data processing job" /><published>2019-01-19T12:50:00+09:00</published> <updated>2019-01-19T12:50:00+09:00</updated> <id>https://kidokim509.github.io/posts/spark-job-unit-test/</id> <content src="https://kidokim509.github.io/posts/spark-job-unit-test/" /> <author> <name>Kido Kim</name> </author> <category term="dev" /> <category term="spark" /> <summary> spark job 개발하다가 몇 가지 회고 결과물을 빨리 내겠다고 마음이 급해지니 제일 먼저 UnitTest 개발을 Skip 한다. 여기서부터 코드에서 나쁜 냄새가 나기 시작한다. 가능한한 연산의 과정, 과정을 method로 나누고 UnitTest를 만들자. 특히 numpy나 pandas로 matrix 연산을 하고 있다면, 그리고 vector space가 크다면, 더더욱 그렇게 해야 한다. 안그러면 연산 결과에 대한 검증을 하기가 힘들다. 단, numpy나 pandas 자체를 테스트하지는 말자. 연산결과의 테스트는 간단한 수치나 matrix를 pararellize해서 수행하고, 여... </summary> </entry> <entry><title>함께 자라기</title><link href="https://kidokim509.github.io/posts/road-to-agile/" rel="alternate" type="text/html" title="함께 자라기" /><published>2019-01-15T02:59:00+09:00</published> <updated>2019-01-15T02:59:00+09:00</updated> <id>https://kidokim509.github.io/posts/road-to-agile/</id> <content src="https://kidokim509.github.io/posts/road-to-agile/" /> <author> <name>Kido Kim</name> </author> <category term="book" /> <summary> 책 ‘함께 자라기’를 읽고 제목: 함께 자라기 - 애자일로 가는 길 지은이: 김창준 출판사: 인사이트 자라기 경력과 전문성은 그다지 상관관계가 없다. 일을 오래했다고 해서 (연차가 높다고 해서) 실력이 늘지 않는다. 학습을 통한 성장을 이루어야 한다. 학습 프레임으로 사고하라. 일이나 삶을 성과나 성취 위주로 (실행 프레임) 사고하면 성과나 경쟁에 집중하여 학습하지 못함 현재 나에게 주어진 과업을 ‘내가 얼마나 배우느냐’로 바라볼 것 학습을 잘 하려면 새로운 것을 더 배우는 것 보다도 가지고 있는 것을 잘* 활용*할 줄 알아야 한다... </summary> </entry> <entry><title>type erasure</title><link href="https://kidokim509.github.io/posts/type-erasure/" rel="alternate" type="text/html" title="type erasure" /><published>2018-12-20T02:59:00+09:00</published> <updated>2018-12-20T02:59:00+09:00</updated> <id>https://kidokim509.github.io/posts/type-erasure/</id> <content src="https://kidokim509.github.io/posts/type-erasure/" /> <author> <name>Kido Kim</name> </author> <category term="dev" /> <category term="java" /> <summary> 참고: https://www.baeldung.com/java-type-erasure http://toby.epril.com/?p=248 http://wonwoo.ml/index.php/post/1743 Type erasure can be explained as the process of enforcing type constraints only at compile time and discarding the element type information at runtime. 타입 제한을 컴파일 타임에만 강제하고, 런타임에는 타입 정보를 제거해버린다. public static &amp;lt;E&amp;gt; boolean containsElement(E [] elements, E element){ ... </summary> </entry> </feed>
